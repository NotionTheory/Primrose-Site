extends ../templates/documentation.jade
block document
  // 0
  h1 Getting started
  img.logo(src= fileRoot + "images/logo128.png", alt="logo", title="Primrose", style="float:left;padding:10px")

  p Primrose is a cross-browser, multi-device framework for building productivity tools in #[a(href= fileRoot + "#webvr") WebVR] applications. Developers model their scenes in #[a(href="https://www.blender.org", target="_blank") Blender] (or some other 3D modeling package), create a web page using Primrose to load the scene, then manipulate objects within the scene using interfaces similar to the standard DOM functions with which they are already familiar.
  p It includes a suite of GUI controls—like buttons and a syntax-highlighting code editor control—to simplify the process of building VR applications that emphasize interactive, productive work. Use it to experiment with new ideas on productivity UIs in virtual spaces.
  p Primrose is free, open source software (#[a(href="https://github.com/capnmidnight/Primrose/blob/master/LICENSE.md", target="_blank") GPLv3]) and may readily be used with other #[a(href="https://en.wikipedia.org/wiki/Free_and_open-source_software", target="_blank") FOSS] projects.
  ul
    li: a(href= fileRoot + "Primrose.min.js", target="_blank") Download the latest version of the Primrose WebVR framework
    li: a(href= fileRoot + "PrimroseDependencies.min.js", target="_blank") Download Primrose's dependencies as a single package
    li: a(href= fileRoot + "doc/setup.html") Read detailed installation and setup instructions
    li: a(href= fileRoot + "doc/drum.html") Learn how to make a simple drum-machine application
      
  p Additionally, you may wish to:
  ul
    li: a(href="https://github.com/capnmidnight/pliny/blob/master/README.md", target="_blank") Read about how the Pliny documentation system works with Primrose
    li: a(href="https://www.github.com/capnmidnight/Primrose", target="_blank") Check out the GitHub repository
    li: a(href="https://www.github.com/capnmidnight/Primrose/issues", target="_blank") File an issue report
    li: a(href="http://threejs.org/", target="_blank") Learn more about Three.js
    li: a(href="http://webvr.info/", target="_blank") Learn more about WebVR
    li: a(href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API", target="_blank") Read the WebVR documentation on MDN

  h2 Example
  p Using Primrose to make web applications is straightforward. To start, #[a(href= fileRoot + "quickstart.zip") download the `quickstart` example project]. In it, you will find the following files:
  ul
    li #[code app.js] - this is where you will write your JavaScript code to define your scene.
    li #[code bg.jpg] - a skymap texture.
    li #[code cardboard.mtl] - materials for cardboard.obj,
    li #[code cardboard.obj] - an icon for activating VR mode.
    li #[code deck.png] - a ground texture.
    li #[code helvetiker_regular.typeface.js] - a font for 3D text elements.
    li #[code index.html] - an HTML file to pull it all together.
    li #[code monitor.mtl] - materials for monitor.obj,
    li #[code monitor.obj] - an icon for activating regular full-screen mode.
    li #[code Primrose.min.js] - the Primrose framework.
    li #[code PrimroseDependencies.min.js] - 3rd party JS libraries like Three.js on which Primrose depends, prepackaged for you.
    li #[code PrimroseDocumentation.min.js] - the live documentation database for Primrose.
    li #[code StartHere.exe] - run this executable on Windows to setup a local web server and automatically start your browser.
    li #[code wind.ogg] - some ambient noise for aiding in orienting one's self in the space.


  p In the #[code app.js] file, you'll find the relevant scripts to edit to make your own VR applications. The template project starts out fairly empty.
  pre: code.
    grammar("JavaScript");
    var app = new Primrose.BrowserEnvironment( "My Primrose VR Application", {
        skyTexture: "bg.jpg",
        groundTexture: "deck.png"
      } );
 
    app.addEventListener( "ready", function () {
      // Perform any post-initialization setup. Once this event fires, the Primrose
      // framework is ready and will start animation as soon as this function returns.
    } );
 
    app.addEventListener( "gazecomplete", function(evt){
      // You can respond to "intended stare" events here, i.e. when the user gazes
      // at a particular object for an extended period of time. Usually, about three
      // seconds.
    } );
 
    app.addEventListener( "pointerend", function(evt){
      // You can respond to the user "clicking" an object here. This could be by using
      // a mouse on their desktop PC or by touching the screen while looking at an
      // object on a mobile device.
    } );
 
    app.addEventListener( "update", function ( dt ) {
      // Perform per-frame updates here, like moving objects around according to your
      // own rules.
    } );
    
  p If everything worked correctly, it should look something like this:
  img(src="images/gettingStarted.jpg", alt="screenshot", title="Blank scene")
