extends ../templates/documentation.jade
block document
  // 2
  h1 Frequently Asked Questions

  h2 "What is Primrose?"
  ul
    li Primrose is a web development framework for building virtual reality experiences in the web browser.
    li Primrose is a rapid application development tool for prototyping VR user interfaces.
    li Primrose is a 3D chatroom.
    li Primrose is a live-programming environment.
    li Primrose is a collection of best-practices for building VR applications.
    li Primrose is a collaborative editing tool.
    li Primrose is a tool for building collaborative tools.
    li Primrose is a system for networking real-world devices together and presenting them in one virtual environment.
    li Primrose is love.

  p Primrose is all of these things.

  h2 "What is not Primrose?"
  p Primrose is not a fully-featured game development framework. The purpose of Primrose is to explore productivity applications. VR is very taxing on graphics resources, which can leave the business-need of the application starved. Thus, graphics fidelity in Primrose is kept simple so as to ensure compatability with older devices.

  h2 "But what do you do with it?"
  p The tools that Primrose provides are meant to enable experimentation with the VR form, to try out new ideas in user interface design and figure out what works best in VR. As different types of interactions become common and accepted as best-practice in the VR community, they will be added to Primrose as part of the basic building blocks of development.

  p To that end, Primrose focuses on a small subset of what could be possible with VR. It provides a physical world--think of it like a desert wasteland, to be used as a blank canvas--in which the user stands and freely moves about to interact with objects directly. While we recognize that VR can potentially present far more diverse experiences than strictly literal interpretations of time and space, we feel that this limitation helps focus the user towards productive goals.

  h2 "What License does Primrose use?"
  p Primrose is free, open source software (#[a(href="https://github.com/capnmidnight/Primrose/blob/master/LICENSE.md") GPLv3]) and may readily be used with other #[a(href="https://en.wikipedia.org/wiki/Free_and_open-source_software") FOSS] projects.

  h2 "Why did you choose the GPL over the LGPL or MIT for the license"?
  p It's my general opinion that the interpreted nature of JavaScript means that it is always a source code release to the user that satisfies the GPL, as it does not get compiled to a byte code before going to the client, and even minified code can be reversed.
  p There is a lot of FUD surrounding the GPL, making #[a(href="http://greendrake.info/#nfy0", target="_blank") using the GPL for JavaScript libraries a controversial topic]. But if certain companies are irrationally fearful of the GPL and don't think it is compatible with their work, then I would prefer they don't use it, rather than use it, benefit financially from it, and have no incentive to provide any benefit back to me.
  p I've put a lot of work into Primrose. In open sourcing it and making it available to the world to use, all that I ask is for you to do the same.
  p It's important to remember that the GPL does not restrict use. Indeed, it's entire purpose is to make restrictions on use impossible. As long as you are in development, not distributing your project to other people, there is no need to do anything involving licensing. The GPL's only restrictions apply to distribution. This means that if you feel that:
  ul
    li minification is not a true source release, or future compiling to WASM constitutes a binary release that does not satisfy the GPL,
    li you can only make a financial return if you close your client-side source because your server-side code does not add significant value to your project,
    li Primrose still adds significant value to your project that you cannot remove it, and
    li you are ready to release your project to the public.
  p Then you can always pick up the phone and negotiate an arrangement that allows you to keep your client-side source code closed.

  h2 "What is WebVR?"
  p WebVR is a draft standard for presenting content in commonly available web browsers on virtual reality hardware. See #[a(href="#WhatisWebVR?") What is WebVR?] for more information.

  h2 "But the resolution on the Oculus Rift DK2 is awful!"
  p This is certainly a problem, but there isn't much to do about it, and we believe it will not be a problem in the near future. We are developing Primrose to be able to develop other products to be ready at that time.

  h2 "How do I contribute to Primrose?"
  p To simplify licensing issues, contributions to Primrose require a copyright assignment to me, Sean T. McBeth. Please include your name and email address in the #[a(href="https://github.com/capnmidnight/Primrose/blob/master/CONTRIBUTORS.md") CONTRIBUTORS.md] file with your pull request. This will serve as your copyright assignment.

  h2 "Why not use Unity/Unreal Engine?"
  p Unity and Unreal Engine are game development engines that are focused on game development concerns. As such, they are primarily centered on the 3D content pipeline and native, desktop applications performance. These concerns do not mesh well with the fast-paced environment of web development.

  p The tooling and data formats that Unity and Unreal Engine use are largely proprietary, or resistant to integration with other, open-source tools. We feel that web development works best when it is freely available to everyone. Free as in beer. Free as in freedom.

  p Finally, we believe that the web browser makes for an excellent deployment platform. Everyone has a web browser on their laptops and phones. Targeting the web browser allows us to skip large concerns for how to build cross-platform applications. 

  h2 "But didn't Mozilla abandon Canvas for #[a(href="https://mozillalabs.com/en-US/skywriter/") Bespin/SkyWriter]?"
  p Mozilla abandoned Bespin as a project *entirely*, choosing to adopt Ace for convenience and time-cost purposes instead. Also, their requirements had no need for the text to be an image. We specifically need an image to use as a texture on 3D objects. Primrose fulfills a different purpose than Bespin.

  h2 "Why not #[a(href="http://ace.c9.io/#nav=about") Ace]/#[a(href="https://codemirror.net/") CodeMirror]?"
  p There are a few browser-based source code editor projects that render to DOM elements, with Ace and CodeMirror probably being the most popular. All solutions involving overlaying of HTML elements on top of a base Canvas element do not composite well in WebGL contexts. This may work fine in 2D, where elements are built in layers, but in 3D the HTML Element is not a part the scene and does not participate in depth buffering. The text will always be a 2D element masquerading in a 3D world, never overlapping properly with other objects in the scene.

  h2 "Why not #[a(href="https://github.com/danielearwicker/carota") Carota]?"
  p Carota is a fine project, but it is intended for rich-text editing. We don't want the user to be in control of the styling of a document, unless they are specifically changing the styling of a theme to apply to the syntax-highlighted text.

  h2 "Why not #[a(href="http://kra.hn/projects/live-programming-with-three-and-webvr") CodeChisel3D] or #[a(href="http://www.lutzroeder.com/html5/textor/") Textor]?"
  p We didn't know about CodeChisel3D or Textor at the time that we started this project. CodeChisel3D is based on an adapted version of Ace called #[a(href="https://github.com/rksm/three-codeeditor") Three-CodeEditor]. Textor is another from-scratch text editor, written in TypeScript, that draws directly to Canvas. They both look like a fine projects. Primrose is meant to be more than just a text editor. It's a general-purpose application framework for building productivity apps.

  h2 "Why the name Primrose?"
  p There is a lot that goes in to naming a project. You want the project name to be memorable, concise, easy to pronounce, and not conjure bad feelings in potential user's minds. A bad name makes it hard for people to talk about your project, and you don't want to discourage people form talking about your project.

  p With that in mind, we tried to imagine ourselves as a member of a development team, sitting in an office somewhere, trying to convince her coworkers to use our software. How does the phrase, "what if we used &lt;Insert Name Here>?" sound in the context of the meeting? A lot of potential names got thrown out just for being too hard to pronounce, too generic-sounding, or not something you'd want to say out loud in a professional setting.

  p It's kind of hard to have negative connotations about a plant, especially a little one. Also, there is some precedent in software to name projects after plants.
  ul
    li Oak was the original name of the Java programming language.
    li NetBeans is an Integrated Development Environment, that gets its name from the fact that coffee has been grown on the island of Java for over 300 years.
    li IBM has a modeling suite named Rational Rose.
    li There used to be an accounting suite named Peachtree that is now named Sage; from one plant name to another.
    li Mint is used by two different companies:
    li A personal finance tool that got bought out by Intuit, and
    li #[a(href="http://www.linuxmint.com") A distribution of Linux] (that we run here at Primrose LLC) based on Ubuntu.
    li PEAR is a PHP framework.
    li RaspberryPi is a small computer.
    li There's a whole company named Apple.
    li One of my favorite companies in the world is #[a(href="http://www.adafruit.com") AdaFruit]

  p So the name Primrose is largely arbitrary, a combination of making lists of plant names that sounded nice, coupled with web searching for them to figure out if they had already been taken. Primrose basically won out over Marigold, because we finally felt that a logo for a primrose flower would be easier to make than a logo for a marigold flower.